// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package openrtb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB27eec76DecodeGithubComMatipanOpenrtb(in *jlexer.Lexer, out *Request) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "at":
			out.At = int64(in.Int64())
		case "tmax":
			out.Tmax = int64(in.Int64())
		case "id":
			out.ID = string(in.String())
		case "bcat":
			if in.IsNull() {
				in.Skip()
				out.BCat = nil
			} else {
				in.Delim('[')
				if out.BCat == nil {
					if !in.IsDelim(']') {
						out.BCat = make([]string, 0, 4)
					} else {
						out.BCat = []string{}
					}
				} else {
					out.BCat = (out.BCat)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.BCat = append(out.BCat, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "badv":
			if in.IsNull() {
				in.Skip()
				out.BAdv = nil
			} else {
				in.Delim('[')
				if out.BAdv == nil {
					if !in.IsDelim(']') {
						out.BAdv = make([]string, 0, 4)
					} else {
						out.BAdv = []string{}
					}
				} else {
					out.BAdv = (out.BAdv)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.BAdv = append(out.BAdv, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bapp":
			if in.IsNull() {
				in.Skip()
				out.BApp = nil
			} else {
				in.Delim('[')
				if out.BApp == nil {
					if !in.IsDelim(']') {
						out.BApp = make([]string, 0, 4)
					} else {
						out.BApp = []string{}
					}
				} else {
					out.BApp = (out.BApp)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.BApp = append(out.BApp, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "imp":
			if in.IsNull() {
				in.Skip()
				out.Imps = nil
			} else {
				in.Delim('[')
				if out.Imps == nil {
					if !in.IsDelim(']') {
						out.Imps = make([]*Imp, 0, 8)
					} else {
						out.Imps = []*Imp{}
					}
				} else {
					out.Imps = (out.Imps)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *Imp
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(Imp)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Imps = append(out.Imps, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "device":
			if in.IsNull() {
				in.Skip()
				out.Device = nil
			} else {
				if out.Device == nil {
					out.Device = new(Device)
				}
				(*out.Device).UnmarshalEasyJSON(in)
			}
		case "app":
			if in.IsNull() {
				in.Skip()
				out.App = nil
			} else {
				if out.App == nil {
					out.App = new(App)
				}
				(*out.App).UnmarshalEasyJSON(in)
			}
		case "regs":
			if in.IsNull() {
				in.Skip()
				out.Regs = nil
			} else {
				if out.Regs == nil {
					out.Regs = new(Regs)
				}
				(*out.Regs).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComMatipanOpenrtb(out *jwriter.Writer, in Request) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"at\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.At))
	}
	{
		const prefix string = ",\"tmax\":"
		out.RawString(prefix)
		out.Int64(int64(in.Tmax))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"bcat\":"
		out.RawString(prefix)
		if in.BCat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.BCat {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"badv\":"
		out.RawString(prefix)
		if in.BAdv == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.BAdv {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"bapp\":"
		out.RawString(prefix)
		if in.BApp == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.BApp {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"imp\":"
		out.RawString(prefix)
		if in.Imps == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Imps {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"device\":"
		out.RawString(prefix)
		if in.Device == nil {
			out.RawString("null")
		} else {
			(*in.Device).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"app\":"
		out.RawString(prefix)
		if in.App == nil {
			out.RawString("null")
		} else {
			(*in.App).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"regs\":"
		out.RawString(prefix)
		if in.Regs == nil {
			out.RawString("null")
		} else {
			(*in.Regs).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Request) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComMatipanOpenrtb(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Request) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComMatipanOpenrtb(l, v)
}
func easyjsonB27eec76DecodeGithubComMatipanOpenrtb1(in *jlexer.Lexer, out *RegsExt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gdpr":
			out.GDPR = string(in.String())
		case "us_privacy":
			out.CCPA = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComMatipanOpenrtb1(out *jwriter.Writer, in RegsExt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"gdpr\":"
		out.RawString(prefix[1:])
		out.String(string(in.GDPR))
	}
	{
		const prefix string = ",\"us_privacy\":"
		out.RawString(prefix)
		out.String(string(in.CCPA))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegsExt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComMatipanOpenrtb1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegsExt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComMatipanOpenrtb1(l, v)
}
func easyjsonB27eec76DecodeGithubComMatipanOpenrtb2(in *jlexer.Lexer, out *Regs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coppa":
			out.COPPA = int64(in.Int64())
		case "ext":
			if in.IsNull() {
				in.Skip()
				out.Ext = nil
			} else {
				if out.Ext == nil {
					out.Ext = new(RegsExt)
				}
				(*out.Ext).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComMatipanOpenrtb2(out *jwriter.Writer, in Regs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coppa\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.COPPA))
	}
	{
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		if in.Ext == nil {
			out.RawString("null")
		} else {
			(*in.Ext).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Regs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComMatipanOpenrtb2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Regs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComMatipanOpenrtb2(l, v)
}
func easyjsonB27eec76DecodeGithubComMatipanOpenrtb3(in *jlexer.Lexer, out *Publisher) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "cat":
			out.CAT = string(in.String())
		case "domain":
			out.Domain = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComMatipanOpenrtb3(out *jwriter.Writer, in Publisher) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"cat\":"
		out.RawString(prefix)
		out.String(string(in.CAT))
	}
	{
		const prefix string = ",\"domain\":"
		out.RawString(prefix)
		out.String(string(in.Domain))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Publisher) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComMatipanOpenrtb3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Publisher) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComMatipanOpenrtb3(l, v)
}
func easyjsonB27eec76DecodeGithubComMatipanOpenrtb4(in *jlexer.Lexer, out *ImpVideo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "minduration":
			out.MinDuration = int64(in.Int64())
		case "maxduration":
			out.MaxDuration = int64(in.Int64())
		case "protocol":
			out.Protocol = int64(in.Int64())
		case "w":
			out.W = int64(in.Int64())
		case "h":
			out.H = int64(in.Int64())
		case "startdelay":
			out.StartDelay = int64(in.Int64())
		case "placement":
			out.Placement = int64(in.Int64())
		case "protocols":
			if in.IsNull() {
				in.Skip()
				out.Protocols = nil
			} else {
				in.Delim('[')
				if out.Protocols == nil {
					if !in.IsDelim(']') {
						out.Protocols = make([]int64, 0, 8)
					} else {
						out.Protocols = []int64{}
					}
				} else {
					out.Protocols = (out.Protocols)[:0]
				}
				for !in.IsDelim(']') {
					var v13 int64
					v13 = int64(in.Int64())
					out.Protocols = append(out.Protocols, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.Battr = nil
			} else {
				in.Delim('[')
				if out.Battr == nil {
					if !in.IsDelim(']') {
						out.Battr = make([]int64, 0, 8)
					} else {
						out.Battr = []int64{}
					}
				} else {
					out.Battr = (out.Battr)[:0]
				}
				for !in.IsDelim(']') {
					var v14 int64
					v14 = int64(in.Int64())
					out.Battr = append(out.Battr, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mimes":
			if in.IsNull() {
				in.Skip()
				out.Mimes = nil
			} else {
				in.Delim('[')
				if out.Mimes == nil {
					if !in.IsDelim(']') {
						out.Mimes = make([]int64, 0, 8)
					} else {
						out.Mimes = []int64{}
					}
				} else {
					out.Mimes = (out.Mimes)[:0]
				}
				for !in.IsDelim(']') {
					var v15 int64
					v15 = int64(in.Int64())
					out.Mimes = append(out.Mimes, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComMatipanOpenrtb4(out *jwriter.Writer, in ImpVideo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"minduration\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.MinDuration))
	}
	{
		const prefix string = ",\"maxduration\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxDuration))
	}
	{
		const prefix string = ",\"protocol\":"
		out.RawString(prefix)
		out.Int64(int64(in.Protocol))
	}
	{
		const prefix string = ",\"w\":"
		out.RawString(prefix)
		out.Int64(int64(in.W))
	}
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.Int64(int64(in.H))
	}
	{
		const prefix string = ",\"startdelay\":"
		out.RawString(prefix)
		out.Int64(int64(in.StartDelay))
	}
	{
		const prefix string = ",\"placement\":"
		out.RawString(prefix)
		out.Int64(int64(in.Placement))
	}
	{
		const prefix string = ",\"protocols\":"
		out.RawString(prefix)
		if in.Protocols == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.Protocols {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v17))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"battr\":"
		out.RawString(prefix)
		if in.Battr == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.Battr {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v19))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"mimes\":"
		out.RawString(prefix)
		if in.Mimes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Mimes {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v21))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ImpVideo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComMatipanOpenrtb4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ImpVideo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComMatipanOpenrtb4(l, v)
}
func easyjsonB27eec76DecodeGithubComMatipanOpenrtb5(in *jlexer.Lexer, out *ImpFormat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "h":
			out.H = int64(in.Int64())
		case "w":
			out.W = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComMatipanOpenrtb5(out *jwriter.Writer, in ImpFormat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.H))
	}
	{
		const prefix string = ",\"w\":"
		out.RawString(prefix)
		out.Int64(int64(in.W))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ImpFormat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComMatipanOpenrtb5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ImpFormat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComMatipanOpenrtb5(l, v)
}
func easyjsonB27eec76DecodeGithubComMatipanOpenrtb6(in *jlexer.Lexer, out *ImpBanner) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "h":
			out.H = int64(in.Int64())
		case "w":
			out.W = int64(in.Int64())
		case "pos":
			out.Pos = int64(in.Int64())
		case "api":
			if in.IsNull() {
				in.Skip()
				out.API = nil
			} else {
				in.Delim('[')
				if out.API == nil {
					if !in.IsDelim(']') {
						out.API = make([]int64, 0, 8)
					} else {
						out.API = []int64{}
					}
				} else {
					out.API = (out.API)[:0]
				}
				for !in.IsDelim(']') {
					var v22 int64
					v22 = int64(in.Int64())
					out.API = append(out.API, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "expdir":
			if in.IsNull() {
				in.Skip()
				out.Expdir = nil
			} else {
				in.Delim('[')
				if out.Expdir == nil {
					if !in.IsDelim(']') {
						out.Expdir = make([]int64, 0, 8)
					} else {
						out.Expdir = []int64{}
					}
				} else {
					out.Expdir = (out.Expdir)[:0]
				}
				for !in.IsDelim(']') {
					var v23 int64
					v23 = int64(in.Int64())
					out.Expdir = append(out.Expdir, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "format":
			if in.IsNull() {
				in.Skip()
				out.Format = nil
			} else {
				in.Delim('[')
				if out.Format == nil {
					if !in.IsDelim(']') {
						out.Format = make([]*ImpFormat, 0, 8)
					} else {
						out.Format = []*ImpFormat{}
					}
				} else {
					out.Format = (out.Format)[:0]
				}
				for !in.IsDelim(']') {
					var v24 *ImpFormat
					if in.IsNull() {
						in.Skip()
						v24 = nil
					} else {
						if v24 == nil {
							v24 = new(ImpFormat)
						}
						(*v24).UnmarshalEasyJSON(in)
					}
					out.Format = append(out.Format, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComMatipanOpenrtb6(out *jwriter.Writer, in ImpBanner) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.H))
	}
	{
		const prefix string = ",\"w\":"
		out.RawString(prefix)
		out.Int64(int64(in.W))
	}
	{
		const prefix string = ",\"pos\":"
		out.RawString(prefix)
		out.Int64(int64(in.Pos))
	}
	{
		const prefix string = ",\"api\":"
		out.RawString(prefix)
		if in.API == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.API {
				if v25 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v26))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"expdir\":"
		out.RawString(prefix)
		if in.Expdir == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.Expdir {
				if v27 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v28))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"format\":"
		out.RawString(prefix)
		if in.Format == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Format {
				if v29 > 0 {
					out.RawByte(',')
				}
				if v30 == nil {
					out.RawString("null")
				} else {
					(*v30).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ImpBanner) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComMatipanOpenrtb6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ImpBanner) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComMatipanOpenrtb6(l, v)
}
func easyjsonB27eec76DecodeGithubComMatipanOpenrtb7(in *jlexer.Lexer, out *Imp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bidfloor":
			out.Bidfloor = float64(in.Float64())
		case "secure":
			out.Secure = int(in.Int())
		case "bidfloorcur":
			out.BidfloorCur = string(in.String())
		case "displaymanager":
			out.DisplayManager = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "banner":
			if in.IsNull() {
				in.Skip()
				out.Banner = nil
			} else {
				if out.Banner == nil {
					out.Banner = new(ImpBanner)
				}
				(*out.Banner).UnmarshalEasyJSON(in)
			}
		case "video":
			if in.IsNull() {
				in.Skip()
				out.Video = nil
			} else {
				if out.Video == nil {
					out.Video = new(ImpVideo)
				}
				(*out.Video).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComMatipanOpenrtb7(out *jwriter.Writer, in Imp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bidfloor\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Bidfloor))
	}
	{
		const prefix string = ",\"secure\":"
		out.RawString(prefix)
		out.Int(int(in.Secure))
	}
	{
		const prefix string = ",\"bidfloorcur\":"
		out.RawString(prefix)
		out.String(string(in.BidfloorCur))
	}
	{
		const prefix string = ",\"displaymanager\":"
		out.RawString(prefix)
		out.String(string(in.DisplayManager))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"banner\":"
		out.RawString(prefix)
		if in.Banner == nil {
			out.RawString("null")
		} else {
			(*in.Banner).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"video\":"
		out.RawString(prefix)
		if in.Video == nil {
			out.RawString("null")
		} else {
			(*in.Video).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Imp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComMatipanOpenrtb7(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Imp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComMatipanOpenrtb7(l, v)
}
func easyjsonB27eec76DecodeGithubComMatipanOpenrtb8(in *jlexer.Lexer, out *DeviceExt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ifv":
			out.IFV = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComMatipanOpenrtb8(out *jwriter.Writer, in DeviceExt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ifv\":"
		out.RawString(prefix[1:])
		out.String(string(in.IFV))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeviceExt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComMatipanOpenrtb8(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeviceExt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComMatipanOpenrtb8(l, v)
}
func easyjsonB27eec76DecodeGithubComMatipanOpenrtb9(in *jlexer.Lexer, out *Device) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ip":
			out.IP = string(in.String())
		case "ua":
			out.UA = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "os":
			out.OS = string(in.String())
		case "osv":
			out.OSV = string(in.String())
		case "ifa":
			out.IFA = string(in.String())
		case "hwv":
			out.HWV = string(in.String())
		case "model":
			out.Model = string(in.String())
		case "dnt":
			out.DNT = string(in.String())
		case "h":
			out.H = int64(in.Int64())
		case "w":
			out.W = int64(in.Int64())
		case "connectionType":
			out.ConnectionType = int64(in.Int64())
		case "deviceType":
			out.DeviceType = int64(in.Int64())
		case "ext":
			if in.IsNull() {
				in.Skip()
				out.Ext = nil
			} else {
				if out.Ext == nil {
					out.Ext = new(DeviceExt)
				}
				(*out.Ext).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComMatipanOpenrtb9(out *jwriter.Writer, in Device) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix[1:])
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"ua\":"
		out.RawString(prefix)
		out.String(string(in.UA))
	}
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	{
		const prefix string = ",\"os\":"
		out.RawString(prefix)
		out.String(string(in.OS))
	}
	{
		const prefix string = ",\"osv\":"
		out.RawString(prefix)
		out.String(string(in.OSV))
	}
	{
		const prefix string = ",\"ifa\":"
		out.RawString(prefix)
		out.String(string(in.IFA))
	}
	{
		const prefix string = ",\"hwv\":"
		out.RawString(prefix)
		out.String(string(in.HWV))
	}
	{
		const prefix string = ",\"model\":"
		out.RawString(prefix)
		out.String(string(in.Model))
	}
	{
		const prefix string = ",\"dnt\":"
		out.RawString(prefix)
		out.String(string(in.DNT))
	}
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.Int64(int64(in.H))
	}
	{
		const prefix string = ",\"w\":"
		out.RawString(prefix)
		out.Int64(int64(in.W))
	}
	{
		const prefix string = ",\"connectionType\":"
		out.RawString(prefix)
		out.Int64(int64(in.ConnectionType))
	}
	{
		const prefix string = ",\"deviceType\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeviceType))
	}
	{
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		if in.Ext == nil {
			out.RawString("null")
		} else {
			(*in.Ext).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Device) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComMatipanOpenrtb9(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Device) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComMatipanOpenrtb9(l, v)
}
func easyjsonB27eec76DecodeGithubComMatipanOpenrtb10(in *jlexer.Lexer, out *AppExt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "devuserid":
			out.Devuserid = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComMatipanOpenrtb10(out *jwriter.Writer, in AppExt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"devuserid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Devuserid))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AppExt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComMatipanOpenrtb10(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AppExt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComMatipanOpenrtb10(l, v)
}
func easyjsonB27eec76DecodeGithubComMatipanOpenrtb11(in *jlexer.Lexer, out *AppContent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "language":
			out.Language = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComMatipanOpenrtb11(out *jwriter.Writer, in AppContent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AppContent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComMatipanOpenrtb11(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AppContent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComMatipanOpenrtb11(l, v)
}
func easyjsonB27eec76DecodeGithubComMatipanOpenrtb12(in *jlexer.Lexer, out *App) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "bundle":
			out.Bundle = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "publisher":
			if in.IsNull() {
				in.Skip()
				out.Publisher = nil
			} else {
				if out.Publisher == nil {
					out.Publisher = new(Publisher)
				}
				(*out.Publisher).UnmarshalEasyJSON(in)
			}
		case "content":
			if in.IsNull() {
				in.Skip()
				out.Content = nil
			} else {
				if out.Content == nil {
					out.Content = new(AppContent)
				}
				(*out.Content).UnmarshalEasyJSON(in)
			}
		case "ext":
			if in.IsNull() {
				in.Skip()
				out.Ext = nil
			} else {
				if out.Ext == nil {
					out.Ext = new(AppExt)
				}
				(*out.Ext).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComMatipanOpenrtb12(out *jwriter.Writer, in App) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"bundle\":"
		out.RawString(prefix)
		out.String(string(in.Bundle))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"publisher\":"
		out.RawString(prefix)
		if in.Publisher == nil {
			out.RawString("null")
		} else {
			(*in.Publisher).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		if in.Content == nil {
			out.RawString("null")
		} else {
			(*in.Content).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		if in.Ext == nil {
			out.RawString("null")
		} else {
			(*in.Ext).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v App) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComMatipanOpenrtb12(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *App) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComMatipanOpenrtb12(l, v)
}
